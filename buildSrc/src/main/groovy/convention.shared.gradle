plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'dev.lukebemish.conventions.java'
    id 'dev.lukebemish.managedversioning'
}

managedVersioning {
    versionFile.set project.rootDir.toPath().resolve('version.properties').toFile()
    gitWorkingDir.set project.rootDir
    metadataVersion.set libs.versions.minecraft
    versionPRs()
    versionSnapshots()
}

managedVersioning.apply()

version = rootProject.version
group = rootProject.group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()
java.withJavadocJar()

javadoc {
    include "**/api/**"
}

base {
    archivesName = "${artifact_id}-${project.name}-${libs.versions.minecraft.get()}"
}

repositories {
    mavenCentral()
    maven {
        name = 'Architectury'
        url "https://maven.architectury.dev/"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

configurations {
    rootProjectLicense.canBeResolved = true
}

dependencies {
    rootProjectLicense project(path: ':', configuration: 'license')
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId "$artifact_id-${project.name}"
            from components.java
            managedVersioning.publishing.sign(signing, it)
            managedVersioning.publishing.pom(it, github_repo, license)
            pom {
                name = "$mod_id - ${project.name}"
                description = mod_description
            }
        }
    }
}

managedVersioning.publishing.mavenPullRequest(publishing)
managedVersioning.publishing.mavenSnapshot(publishing)

sourcesJar {
    dependsOn(configurations.rootProjectLicense)
    from(configurations.rootProjectLicense) {
        rename { "${it}_${artifact_id}" }
    }
}

['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each {
    configurations."$it".outgoing {
        capability("$group:$artifact_id:$version")
        capability("$group:$artifact_id-${project.name}:$version")
    }
}

jar {
    dependsOn(configurations.rootProjectLicense)
    from(configurations.rootProjectLicense) {
        rename { "${it}_${artifact_id}" }
    }

    manifest {
        attributes([
            'Specification-Title'       : mod_name,
            'Specification-Vendor'      : mod_author,
            'Specification-Version'     : rootProject.version,
            'Implementation-Title'      : "$mod_name - ${project.name}",
            'Implementation-Version'    : rootProject.version,
            'Implementation-Vendor'     : mod_author,
            'Implementation-Commit-Time': managedVersioning.timestamp.get(),
            'Implementation-Commit'     : managedVersioning.hash.get(),
            'Built-On-Minecraft'        : libs.versions.minecraft.get()
        ])
    }
}

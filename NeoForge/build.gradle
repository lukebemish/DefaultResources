plugins {
    alias libs.plugins.neogradle.userdev
    alias libs.plugins.neogradle.mixin
    //alias libs.plugins.librarian
}

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
        //modSource project(':Common').sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    implementation libs.neoforge

    compileOnly project(":Common")

    compileOnly libs.autoservice
    annotationProcessor libs.autoservice
}

mixin {
    //add project(":Common").sourceSets.main, 'defaultresources.refmap.json'
    //config 'mixin.defaultresources.json'
    configs.add 'mixin.defaultresources.json'
}

tasks.named('compileJava',JavaCompile).configure {
    source(project(":Common").sourceSets.main.allSource)
}


import groovy.json.JsonOutput
import groovy.json.JsonSlurper

processResources {
    from project(":Common").sourceSets.main.resources

    doLast {
        fileTree(dir: outputs.files.asPath, include: "mixin.*.json").each { File file ->
            def obj = new JsonSlurper().parse(file)
            if (obj.refmap) {
                obj.remove('refmap')
            }
            file.text = JsonOutput.toJson(obj)
        }
    }
}

sourcesJar {
    from project(":Common").sourceSets.main.allSource
}

javadocJar {
    from project(":Common").sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId base.archivesName.get()
        }
    }
}
